{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNL1OozfHS8DzNmsGFJXw6g"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 1. Data **Loading**"],"metadata":{"id":"aWsN_X06YT32"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":567},"id":"lqWoFDxoTmUE","executionInfo":{"status":"error","timestamp":1730433493290,"user_tz":-330,"elapsed":1819,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}},"outputId":"51aaa784-5fcd-42b2-bab0-91626be7de8c"},"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/content/netflix_titles.csv'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-a682a22c4438>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mnetflix_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/netflix_titles.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mnetflix_data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    871\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 873\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    874\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    875\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/netflix_titles.csv'"]}],"source":["import pandas as pd\n","import numpy as np\n","netflix_data = pd.read_csv('/content/netflix_titles.csv')\n","netflix_data"]},{"cell_type":"markdown","source":["# 2. Basic **Exploration**"],"metadata":{"id":"S690-QFTYXPj"}},{"cell_type":"code","source":["netflix_data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":228},"id":"PviNNpWcUP-w","executionInfo":{"status":"error","timestamp":1730433493295,"user_tz":-330,"elapsed":66,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}},"outputId":"2d1f319b-78a2-4aef-b329-6f78570c5fa2"},"execution_count":2,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'netflix_data' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-709d94ba10ff>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnetflix_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'netflix_data' is not defined"]}]},{"cell_type":"code","source":["netflix_data.describe()\n"],"metadata":{"id":"dCDOas0sUWAN","executionInfo":{"status":"aborted","timestamp":1730433493298,"user_tz":-330,"elapsed":65,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["netflix_data.head()\n","netflix_data.tail()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":245},"id":"h4y8FySQUczc","executionInfo":{"status":"error","timestamp":1730433493298,"user_tz":-330,"elapsed":63,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}},"outputId":"3a4c749f-7560-48e9-a4ab-3ecdf7f8561e"},"execution_count":3,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'netflix_data' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-4850d6414a72>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnetflix_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mnetflix_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtail\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'netflix_data' is not defined"]}]},{"cell_type":"markdown","source":["# 3. Handling Missing **Data**"],"metadata":{"id":"AsbguyGTYinC"}},{"cell_type":"code","source":["netflix_data.isnull().sum()\n"],"metadata":{"id":"_Rx-eopdUqOr","executionInfo":{"status":"aborted","timestamp":1730433493299,"user_tz":-330,"elapsed":59,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Dropping rows where essential columns like 'director' or 'country' are missing\n","cleaned_data = netflix_data.dropna(subset=['director', 'country'])\n","\n","# Alternatively, we could fill missing 'director' values with 'Unknown'\n","netflix_data['director'].fillna('Unknown', inplace=True)\n"],"metadata":{"id":"cBQLOqK0VHFi","executionInfo":{"status":"aborted","timestamp":1730433493300,"user_tz":-330,"elapsed":59,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 4. Data **Manipulation**"],"metadata":{"id":"nZ2xKAGlYpN5"}},{"cell_type":"code","source":["netflix_data.rename(columns={'listed_in': 'genre'}, inplace=True)\n","netflix_data"],"metadata":{"id":"mjCuB_Y4VHgp","executionInfo":{"status":"aborted","timestamp":1730433493300,"user_tz":-330,"elapsed":59,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Remove season from duration column"],"metadata":{"id":"-n4ZJBrlJGU7"}},{"cell_type":"code","source":["def extract_duration(duration):\n","    if isinstance(duration, float) and np.isnan(duration):\n","        return np.nan\n","\n","    # Convert duration to string to avoid TypeError\n","    duration_str = str(duration)\n","\n","    if 'Season' in duration_str:\n","        return int(duration_str.split(' ')[0])\n","    else:\n","        return int(duration_str.replace(' min', ''))\n","\n","netflix_data['duration'] = netflix_data['duration'].apply(extract_duration)\n"],"metadata":{"id":"1dzl-OUeGC7Q","executionInfo":{"status":"aborted","timestamp":1730433493301,"user_tz":-330,"elapsed":58,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["netflix_data"],"metadata":{"id":"83c93NflIr_c","executionInfo":{"status":"aborted","timestamp":1730433493302,"user_tz":-330,"elapsed":58,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Converting 'date_added' to datetime while handling errors\n","netflix_data['date_added'] = pd.to_datetime(netflix_data['date_added'], errors='coerce')\n","\n","# Extracting the year from the 'date_added' column\n","netflix_data['year_added'] = netflix_data['date_added'].dt.year\n","\n","# Checking if it worked\n","netflix_data[['date_added', 'year_added']].head()\n"],"metadata":{"id":"FKpSsU0AVJEp","executionInfo":{"status":"aborted","timestamp":1730433493303,"user_tz":-330,"elapsed":59,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 5. Data **Filtering**"],"metadata":{"id":"KIoRJLvwZJBP"}},{"cell_type":"code","source":["usa_movies = netflix_data[(netflix_data['type'] == 'Movie') & (netflix_data['country'] == 'United States')]\n","usa_movies"],"metadata":{"id":"xmzsrZULVzvw","executionInfo":{"status":"aborted","timestamp":1730433493303,"user_tz":-330,"elapsed":58,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["netflix_data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":228},"id":"KZuGoHCBJ2R1","executionInfo":{"status":"error","timestamp":1730433493304,"user_tz":-330,"elapsed":59,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}},"outputId":"d5ce543c-8e92-47a6-c486-66d88d8a4d12"},"execution_count":4,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'netflix_data' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-709d94ba10ff>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnetflix_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'netflix_data' is not defined"]}]},{"cell_type":"code","source":["netflix_data['release_year'].dtype"],"metadata":{"id":"bgbv0KBTKNi_","executionInfo":{"status":"aborted","timestamp":1730433493304,"user_tz":-330,"elapsed":55,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["recent_tv_shows = netflix_data[(netflix_data['type'] == 'TV Show') & (netflix_data['release_year'] > 2018)]\n","recent_tv_shows"],"metadata":{"id":"X99qtfo3XKLb","executionInfo":{"status":"aborted","timestamp":1730433493306,"user_tz":-330,"elapsed":57,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 6. Sorting **Data**"],"metadata":{"id":"9KcxMOUPZQtf"}},{"cell_type":"code","source":["sorted_data = netflix_data.sort_values(by='release_year', ascending=False)\n","sorted_data"],"metadata":{"id":"kIZAoIgKXOZj","executionInfo":{"status":"aborted","timestamp":1730433493306,"user_tz":-330,"elapsed":56,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}},"collapsed":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["7. Grouping Data"],"metadata":{"id":"qtpnYgk3ZU5e"}},{"cell_type":"code","source":["netflix_data['country'].fillna('Unknown', inplace=True)\n","netflix_data['rating'].fillna('Unknown', inplace=True)\n","netflix_data.fillna(0, inplace=True)\n","netflix_data"],"metadata":{"id":"9y-R-3S0EfUX","executionInfo":{"status":"aborted","timestamp":1730433493307,"user_tz":-330,"elapsed":57,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["rating_count = netflix_data.groupby('rating').size()\n","rating_count"],"metadata":{"id":"DBinhTO0XYVh","executionInfo":{"status":"aborted","timestamp":1730433493308,"user_tz":-330,"elapsed":57,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["genre_group = netflix_data.groupby('genre').size()\n","genre_group"],"metadata":{"id":"npnX8zmqXavh","executionInfo":{"status":"aborted","timestamp":1730433493308,"user_tz":-330,"elapsed":58,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 8. Advanced Data **Analysis**"],"metadata":{"id":"DT2Ju2bCZav9"}},{"cell_type":"code","source":["content_by_year = netflix_data['year_added'].value_counts().sort_index()\n","content_by_year"],"metadata":{"id":"S4tJzOrNXgSv","executionInfo":{"status":"aborted","timestamp":1730433493309,"user_tz":-330,"elapsed":58,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 9. Data Visualization (using Matplotlib)="],"metadata":{"id":"aah2FuxtZeiO"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","content_by_year.plot(kind='bar', figsize=(10, 6))\n","plt.title('Content Added to Netflix Per Year')\n","plt.xlabel('Year')\n","plt.ylabel('Number of Titles')\n","plt.show()\n"],"metadata":{"id":"dWbZxrORXkCP","executionInfo":{"status":"aborted","timestamp":1730433493310,"user_tz":-330,"elapsed":58,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Building a Regression Model:**\n","Data Preprocessing:\n","Splitting Data:\n","Model Training:\n","Evaluation:"],"metadata":{"id":"eEQ5IqrHaDVX"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","sns.set(style=\"darkgrid\")\n","plt.figure(figsize=(8,6))\n","sns.countplot(x='type', data=netflix_data, palette=\"coolwarm\")\n","plt.title('Distribution of Movies vs. TV Shows on Netflix', fontsize=14)\n","plt.xlabel('Type')\n","plt.ylabel('Count')\n","plt.show()\n"],"metadata":{"id":"SizwFcjfLKmR","executionInfo":{"status":"aborted","timestamp":1730433493311,"user_tz":-330,"elapsed":59,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(10,6))\n","top_genres = netflix_data['genre'].str.split(', ').explode().value_counts().head(10)\n","sns.barplot(x=top_genres.values, y=top_genres.index, palette=\"viridis\")\n","plt.title('Top 10 Genres on Netflix', fontsize=14)\n","plt.xlabel('Count')\n","plt.ylabel('Genre')\n","plt.show()"],"metadata":{"id":"HHLqSP2JL0SV","executionInfo":{"status":"aborted","timestamp":1730433493311,"user_tz":-330,"elapsed":59,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","# Filter the dataset to include only movies (since TV shows have seasons instead of duration in minutes)\n","movies_data = netflix_data[netflix_data['type'] == 'Movie']\n","\n","# Drop rows where 'duration_num' is missing (NaN)\n","movies_data = movies_data.dropna(subset=['duration'])\n","\n","# Select relevant features for the regression model\n","# For simplicity, we'll use 'release_year', 'rating', and 'genre' (formerly 'listed_in') as predictors\n","X = movies_data[['release_year', 'rating', 'genre']]\n","y = movies_data['duration']\n","\n","# Convert categorical variables ('rating' and 'genre') into dummy/indicator variables\n","X = pd.get_dummies(X, drop_first=True)\n","\n","# Splitting the data into training and testing sets (80% train, 20% test)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n","\n","# Displaying the shape of training and testing sets\n","X_train.shape, X_test.shape\n","\n","\n","# Initialize the Linear Regression model\n","reg_model = LinearRegression()\n","\n","# Fit the model on training data\n","reg_model.fit(X_train, y_train)\n","\n","# Predict on the test set\n","y_pred = reg_model.predict(X_test)\n","\n","\n","# Calculate Mean Squared Error and R-squared\n","mse = mean_squared_error(y_test, y_pred)\n","r2 = r2_score(y_test, y_pred)\n","\n","# Output the evaluation metrics\n","print(\"mse:\", mse)\n","\n","print(\"r2:\",r2)\n","\n","plt.plot(y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":402},"id":"uvV3uM8wXy89","executionInfo":{"status":"error","timestamp":1730433496846,"user_tz":-330,"elapsed":3593,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}},"outputId":"8143b24a-34de-4eb7-8309-0f683a4a7592"},"execution_count":5,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'netflix_data' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-d9de63cae630>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# Filter the dataset to include only movies (since TV shows have seasons instead of duration in minutes)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mmovies_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnetflix_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnetflix_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'type'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Movie'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# Drop rows where 'duration_num' is missing (NaN)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'netflix_data' is not defined"]}]},{"cell_type":"code","source":["X_train.shape, X_test.shape"],"metadata":{"id":"7w4q7Xbfaqwm","executionInfo":{"status":"aborted","timestamp":1730433496849,"user_tz":-330,"elapsed":69,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","from wordcloud import WordCloud\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","# Identify outliers using box plots\n","plt.figure(figsize=(10, 6))\n","sns.boxplot(data=netflix_data)\n","plt.title('Identifying Outliers')\n","plt.show()"],"metadata":{"id":"kNk3zy6ZjKfB","executionInfo":{"status":"aborted","timestamp":1730433496851,"user_tz":-330,"elapsed":70,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["q1= netflix_data[['release_year', 'duration']].quantile(0.25)\n","q3= netflix_data[['release_year', 'duration']].quantile(0.75)\n","iqr= q3-q1\n","lower_bound= q1-1.5*iqr\n","upper_bound= q3+1.5*iqr\n","print(lower_bound)\n","print(upper_bound)\n","netflix_data_outlier= netflix_data[~((netflix_data[['release_year', 'duration']] < lower_bound) | (netflix_data[['release_year', 'duration']] > upper_bound)).any(axis=1)]\n","netflix_data_outlier"],"metadata":{"id":"7YCZpqcSPWCw","executionInfo":{"status":"aborted","timestamp":1730433496851,"user_tz":-330,"elapsed":69,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["netflix_data_outlier\n"],"metadata":{"id":"5_MUm6lCQeN2","executionInfo":{"status":"aborted","timestamp":1730433496852,"user_tz":-330,"elapsed":69,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["netflix_data[netflix_data['duration']==154]"],"metadata":{"id":"rvY91QPUQ63R","executionInfo":{"status":"aborted","timestamp":1730433496853,"user_tz":-330,"elapsed":69,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(18, 4))\n","plt.bar(netflix_data['rating'], netflix_data['duration'])"],"metadata":{"id":"BLgf8PDeRLxs","executionInfo":{"status":"aborted","timestamp":1730433496853,"user_tz":-330,"elapsed":68,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["netflix_data_outlier['type'].unique()"],"metadata":{"id":"K1b50EUSTd90","executionInfo":{"status":"aborted","timestamp":1730433496854,"user_tz":-330,"elapsed":65,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["typ = netflix_data_outlier['type'].value_counts()\n","typ"],"metadata":{"id":"Oj76JyMAU69R","executionInfo":{"status":"aborted","timestamp":1730433496854,"user_tz":-330,"elapsed":64,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","typ.plot(kind='bar', figsize=(10, 6))\n","plt.title('Content Added to Netflix y type ')\n","plt.xlabel('type')\n","plt.ylabel('Number of Titles')\n","plt.show()\n"],"metadata":{"id":"mKUCBkTlVJW-","executionInfo":{"status":"aborted","timestamp":1730433496855,"user_tz":-330,"elapsed":64,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Visualize the distribution of movie release years without outlier"],"metadata":{"id":"gdbxmbv5ZSO9"}},{"cell_type":"code","source":["# Visualize the distribution of movie release years without outlier\n","plt.figure(figsize=(12, 6))\n","netflix_data_outlier['release_year'].hist(bins=30)\n","plt.title('Distribution of Movie Release Years')\n","plt.xlabel('Release Year')\n","plt.ylabel('Count')\n","plt.show()"],"metadata":{"id":"dHOIa0YvVV-c","executionInfo":{"status":"aborted","timestamp":1730433496855,"user_tz":-330,"elapsed":63,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Visualize the distribution of movie release years with outlier"],"metadata":{"id":"pyvHdEO2ZXAw"}},{"cell_type":"code","source":["# Visualize the distribution of movie release years\n","plt.figure(figsize=(12, 6))\n","netflix_data['release_year'].hist(bins=30)\n","plt.title('Distribution of Movie Release Years')\n","plt.xlabel('Release Year')\n","plt.ylabel('Count')\n","plt.show()"],"metadata":{"id":"5IMXAsYwW8Ui","executionInfo":{"status":"aborted","timestamp":1730433496855,"user_tz":-330,"elapsed":63,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#https://www.kaggle.com/code/motsimaslam/netflix-movies-tv-shows-linear-regression/notebook"],"metadata":{"id":"xxTbP3FdY-db","executionInfo":{"status":"aborted","timestamp":1730433496856,"user_tz":-330,"elapsed":63,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Convert release_year to numeric\n","netflix_data_outlier['release_year'] = netflix_data_outlier['release_year'].astype(int)\n","# Handle outliers in release_year column\n","q1 = netflix_data_outlier['release_year'].quantile(0.25)\n","q3 = netflix_data_outlier['release_year'].quantile(0.75)\n","iqr = q3 - q1\n","lower_bound = q1 - 1.5 * iqr\n","upper_bound = q3 + 1.5 * iqr\n","netflix_data_outlier2 = netflix_data_outlier[(netflix_data_outlier['release_year'] >= lower_bound) & (netflix_data_outlier['release_year'] <= upper_bound)]\n","netflix_data_outlier2"],"metadata":{"id":"nn0jUiV2rAyv","executionInfo":{"status":"aborted","timestamp":1730433496856,"user_tz":-330,"elapsed":59,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Distribution of Movie Types"],"metadata":{"id":"-4bYO5JAyaco"}},{"cell_type":"code","source":["# Count the number of movies and TV shows\n","print(netflix_data_outlier['type'].value_counts())\n","\n","# Visualize the distribution of movie types\n","plt.figure(figsize=(8, 6))\n","netflix_data['type'].value_counts().plot(kind='bar')\n","plt.title('Distribution of Movie Types')\n","plt.xlabel('Type')\n","plt.ylabel('Count')\n","plt.show()"],"metadata":{"id":"Ehyqu0A-xm9d","executionInfo":{"status":"aborted","timestamp":1730433496857,"user_tz":-330,"elapsed":59,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Find the top directors\n","top_directors = netflix_data_outlier['director'].value_counts().head(10)\n","\n","plt.figure(figsize=(10, 6))\n","top_directors.plot(kind='bar')\n","plt.title('Top Directors with the Most Movies on Netflix')\n","plt.xlabel('Director')\n","plt.ylabel('Number of Movies')\n","plt.show()"],"metadata":{"id":"s4TuktGsyOkZ","executionInfo":{"status":"aborted","timestamp":1730433496857,"user_tz":-330,"elapsed":58,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Top Cast Members"],"metadata":{"id":"mSW2p6zS0QoU"}},{"cell_type":"code","source":["top_cast= netflix_data_outlier['cast'].value_counts().head(10)\n","\n","plt.figure(figsize=(12, 6))\n","top_cast.plot(kind='bar')\n","plt.title('Top Cast Members with the Most Movies on Netflix')\n","plt.xlabel('Cast Member')\n","plt.ylabel('Number of Movies')\n","plt.show()"],"metadata":{"id":"sDT7y8h60OIt","executionInfo":{"status":"aborted","timestamp":1730433496858,"user_tz":-330,"elapsed":57,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Movie Release Years"],"metadata":{"id":"BD3G3OSL1OUv"}},{"cell_type":"code","source":["plt.figure(figsize=(12, 6))\n","netflix_data_outlier['release_year'].hist(bins=30)\n","plt.title('Distribution of Movie Release Years')\n","plt.xlabel('Release Year')\n","plt.ylabel('Count')\n","plt.show()"],"metadata":{"id":"KXUguCKm0b0q","executionInfo":{"status":"aborted","timestamp":1730433496858,"user_tz":-330,"elapsed":56,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["movie Duration"],"metadata":{"id":"VM5RAoXA1aTu"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.figure(figsize=(12,6))\n","netflix_data_outlier['duration'].hist(bins=30)\n","plt.title('Distribution of Movie Duration')\n","plt.xlabel('Duration')\n","plt.ylabel('Count')\n","plt.show()"],"metadata":{"id":"gqSRFtvY1Vo2","executionInfo":{"status":"aborted","timestamp":1730433496859,"user_tz":-330,"elapsed":56,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#Encoding Technique"],"metadata":{"id":"XntpzlqGPrzX"}},{"cell_type":"code","source":["from sklearn.preprocessing import LabelEncoder\n","categorical_columns = netflix_data_outlier.select_dtypes(include=['object'])\n","label_encoder = LabelEncoder()\n","for column in categorical_columns:\n","    netflix_data_outlier[column] = label_encoder.fit_transform(netflix_data_outlier[column].astype(str))\n","\n","netflix_data_outlier"],"metadata":{"id":"AU4UWYFa1r3V","executionInfo":{"status":"aborted","timestamp":1730433496859,"user_tz":-330,"elapsed":55,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["7. Applying Machine Learning Model-Random Forest Classifier"],"metadata":{"id":"tG8V5rCfQUD0"}},{"cell_type":"code","source":["print(netflix_data_outlier.dtypes)"],"metadata":{"id":"RYPPqsY6QIfV","executionInfo":{"status":"aborted","timestamp":1730433496859,"user_tz":-330,"elapsed":55,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"AObkDEkxQV2N"}},{"cell_type":"code","source":["# Split the data into features and target\n","X=netflix_data_outlier[['duration', 'release_year']]\n","y=netflix_data_outlier['rating']\n","\n","# Split the data into train and test sets\n","X_test, X_train, y_test, y_train = train_test_split(X, y, test_size=0.5, random_state=0)\n","\n","# Initialize the Linear Regression\n","model= LinearRegression()\n","model.fit(X_train, y_train)\n","\n","# Make predictions on the test set\n","y_pred= model.predict(X_test)\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n","# Evaluate the model\n","mse= mean_squared_error(y_test, y_pred)\n","mae= mean_absolute_error(y_test, y_pred)\n","r2= r2_score(y_test, y_pred)\n","\n","print(\"Mean Squared Error:\", mse)\n","print(\"Mean Absolute Error:\", mae)\n","print(f'R-squared: {r2:2f}')\n","\n","# Visualize the results\n","plt.figure(figsize=(10, 6))\n","plt.plot(X_test['duration'], y_pred, color='red', label='Predicted')\n","plt.scatter(X_test['duration'], y_test, color='green', label='Actual')\n","\n","plt.xlabel('Duration (minutes)')\n","plt.ylabel('Rating Score')\n","plt.title('Netflix Movie Rating Score Prediction')\n","plt.legend()\n","plt.show()\n","\n","print(\"\\nConclusion:\")\n","print(\"The linear regression model trained on the Netflix movie data was able to predict the IMDB scores with an R-squared value of\", round(r2, 2))\n","print(\"This means the model can explain approximately\", round(r2 * 100, 2), \"% of the variation in the Rating scores.\")\n","print(f\"The model also achieved a Mean Squared Error of {mse:.2f} and a Mean Absolute Error of {mae:.2f}.\")\n","print(\"The model's coefficients suggest that both the duration and release year of a movie have a significant impact on its IMDB score.\")\n","print(\"This information could be useful for Netflix's content selection and marketing strategies, as they can use the model to estimate the potential success of new movies based on their duration and release year.\")"],"metadata":{"id":"P8k-0BaoQY00","executionInfo":{"status":"aborted","timestamp":1730433496860,"user_tz":-330,"elapsed":55,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"t1-6d3rvRz9Q","executionInfo":{"status":"aborted","timestamp":1730433496861,"user_tz":-330,"elapsed":55,"user":{"displayName":"Harsh Jain","userId":"05838684457085731246"}}},"execution_count":null,"outputs":[]}]}